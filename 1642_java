class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        //创建一个优先队列，使最大值位于队列首部
        Queue<Integer> queue = new PriorityQueue<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer n1, Integer n2) {
                return n2.compareTo(n1);
            }
        });
        int index = 0;
        while (true) {
            //判断是否抵达终点
            if (index == heights.length - 1) break; 
            if (heights[index] >= heights[index + 1]) index += 1;
            //建筑物高
            else { 
                int need = heights[index + 1] - heights[index];
                if (bricks >= need) {
                    index += 1;
                    bricks -= need;
                    queue.offer(need);
            } 
            //砖头不够时
            else if (ladders > 0) {
                if (queue.size() != 0 && queue.peek() > need) {
                    bricks += queue.poll(); 
                    ladders -= 1;
                } 
                else {
                    ladders -= 1;
                    index++;
                }
            }
            //梯子用尽，结束 
            else break;
        }
    }
    return index;
    }
}
